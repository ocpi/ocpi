:numbered:
[[types_types]]
== Types

[[types_class_type]]
=== class

When a data type is defined as a "class" in the OCPI specification, we mean a type whose possible values are sets of zero or more pairs of a string and another value. The string is known as a "key", "field name", or "property", and the value associated with the key is known as a field value. For each class type, the specification lists which strings are required and allowed to occur as field names in values of that type, and what the types of the field values of these fields should be.

In the serialized JSON form of OCPI messages, class values are serialized as JSON objects.

[[types_enum_type]]
=== enum

When a data type is defined as an "enum" in the OCPI specification, we mean a type whose possible values are a finite number of strings.

This type is used for class fields where it is clear that there is only a finite set of possible values that is completely known at the time of writing of the specification. An example of a place where this is used is a class field whose possible values are the days of the week.

In the serialized JSON form of OCPI messages, enum values are serialized as JSON strings.

[[types_openenum_type]]
=== OpenEnum _type_

The OpenEnum type is meant for class fields for which the set of all possible values is not known at the time of writing of the specification, but where there are a finite number of known possible values. In this case we want to specify how OCPI implementers can use the known possible values, but also leave room for them to use other values.

This is used for example for connector types, where all implementers should use the same value to identify a widely used connector type like the Type 2 "Mennekes" plug, but where there should also be room for implementers to name new or custom plug types that were not taken into account by OCPI's authors.

In the serialized JSON form of OCPI messages, OpenEnum values are serialized as JSON strings.

When naming new OpenEnum values, OCPI implementers SHOULD follow the "Recommendations for Creators of New Parameters" found in https://datatracker.ietf.org/doc/html/rfc6648[IETF RFC 6648], and SHOULD consult EV Roaming Foundation's guidance on extending OCPI at https://evroaming.org/extending-ocpi/.

[[types_cistring_type]]
=== CiString _type_

Case Insensitive String. Only printable ASCII allowed.
(Non-printable characters like: Carriage returns, Tabs, Line breaks, etc are not allowed)

[[types_datetime_type]]
=== DateTime _type_

All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.

All timestamps SHALL be in UTC.
The absence of the timezone designator implies a UTC timestamp.
Fractional seconds MAY be used.

Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:

[source]
----
2015-06-29T20:39:09Z
2015-06-29T20:39:09
2016-12-29T17:45:09.2Z
2016-12-29T17:45:09.2
2018-01-01T01:08:01.123Z
2018-01-01T01:08:01.123
----

NOTE: +00:00 is not the same as UTC.

[[types_displaytext_class]]
=== DisplayText _class_

[cols="3,2,1,10",options="header"]
|===
|Property |Type |Card. |Description 

|language |<<types_string_type,string>>(2) |1 |Language Code ISO 639-1. 
|text |<<types_string_type,string>>(512) |1 |Text to be displayed to a end user. No markup, html etc. allowed. 
|===

Example:

[source]
----
include::examples/type_displaytext_example.json[]
----


[[types_number_type]]
=== number _type_

Numbers in OCPI are formatted as JSON numbers.
Unless mentioned otherwise, numbers use 4 decimals and a _sufficiently large amount_ of digits.

[[types_price_class]]
=== Price _class_

[cols="3,2,1,10",options="header"]
|===
|Property |Type |Card. |Description

|before_taxes |<<types_number_type,number>> |1 |Price/Cost excluding taxes.
|taxes |<<types_tax_amount_class,TaxAmount>> |* |All taxes that are applicable to this price and relevant to the receiver of the Session or CDR.
|===


[[types_tax_amount_class]]
=== TaxAmount _class_

[cols="3,2,1,10",options="header"]
|===
|Property       |Type                         |Card. |Description
|name           |<<types_string_type,string>> |1     |A description of the tax. In countries where a tax name is required like Canada this can be something like "QST". In countries where this is not required, this can be something more generic like "VAT" or "General Sales Tax".
|account_number |<<types_string_type,string>> |?     | Tax Account Number of the business entity remitting these taxes. Optional as this is not required in all countries.
|percentage     |<<types_number_type,number>> |?     | Tax percentage. Optional as this is not required in all countries.
|amount         |<<types_number_type,number>> |1     | The amount of money of this tax that is due.
|===

[[types_role_enum]]
=== Role _enum_

[cols="3,10",options="header"]
|===
|Value |Description

|CPO |Charge Point Operator Role.
|EMSP |eMobility Service Provider Role.
|NAP |National Access Point Role (national Database with all Location information of a country).
|NSP |Navigation Service Provider Role, role like an eMSP (probably only interested in Location information).
|OTHER |Other role.
|SCSP|Smart Charging Service Provider Role.
|===


[[types_string_type]]
=== string _type_

Case Sensitive String. Only printable UTF-8 allowed.
(Non-printable characters like: Carriage returns, Tabs, Line breaks, etc are not allowed)

All strings in messages and enumerations are case sensitive, unless explicitly stated
otherwise.

[[types_url_type]]
=== URL _type_

An URL a string(255) type following the http://www.w3.org/Addressing/URL/uri-spec.html[w3.org spec].
